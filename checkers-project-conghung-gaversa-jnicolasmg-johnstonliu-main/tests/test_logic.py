from checkers import CheckersGame
from checkers import GameStatus, Color, Command


def test_board_1():
    g = CheckersGame(2)
    assert (
        str(g.board)
        == """E1E1E1
1E1E1E
EEEEEE
EEEEEE
E0E0E0
0E0E0E
"""
    )


def test_board_2():
    g = CheckersGame(3)
    assert (
        str(g.board)
        == """E1E1E1E1
1E1E1E1E
E1E1E1E1
EEEEEEEE
EEEEEEEE
0E0E0E0E
E0E0E0E0
0E0E0E0E
"""
    )


def test_board_3():
    g = CheckersGame(9)
    assert (
        str(g.board)
        == """E1E1E1E1E1E1E1E1E1E1
1E1E1E1E1E1E1E1E1E1E
E1E1E1E1E1E1E1E1E1E1
1E1E1E1E1E1E1E1E1E1E
E1E1E1E1E1E1E1E1E1E1
1E1E1E1E1E1E1E1E1E1E
E1E1E1E1E1E1E1E1E1E1
1E1E1E1E1E1E1E1E1E1E
E1E1E1E1E1E1E1E1E1E1
EEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEE
0E0E0E0E0E0E0E0E0E0E
E0E0E0E0E0E0E0E0E0E0
0E0E0E0E0E0E0E0E0E0E
E0E0E0E0E0E0E0E0E0E0
0E0E0E0E0E0E0E0E0E0E
E0E0E0E0E0E0E0E0E0E0
0E0E0E0E0E0E0E0E0E0E
E0E0E0E0E0E0E0E0E0E0
0E0E0E0E0E0E0E0E0E0E
"""
    )


def test_board_4():
    g = CheckersGame(2)
    g.process_command((4, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 4), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    assert (
        str(g.board)
        == """E1E1E1
1EEEEE
EEEEEE
EEEE0E
E0EEE0
0EREEE
"""
    )


def test_winner_1():
    g = CheckersGame(1)
    g.process_command((3, 0), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 1), (1, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (0, 0))
    g.process_command((2, 1), (1, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (1, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 3), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 0), (0, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (1, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 1), (1, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (0, 1))
    g.process_command(None, None, Command.END_TURN)
    assert g.game_status() is GameStatus.RED


def test_winner_2():
    g = CheckersGame(1)
    g.process_command((4, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 0), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    assert g.game_status() is GameStatus.ONGOING


def test_winner_3():
    g = CheckersGame(3)
    g.process_command((5, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (4, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 4))
    g.process_command((3, 2), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 3), (4, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 3), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 2), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 0), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (3, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 4), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 5), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 7), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 7), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (4, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 5), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 4), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (5, 5))
    g.process_command((7, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 6), (2, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 7), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (4, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (1, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 3), (2, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 7), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (2, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 5), (1, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (0, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 1), (1, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 3), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 7), (1, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 5), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 6), (2, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (1, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (7, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 0), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 3), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (4, 3))
    g.process_command((5, 2), (7, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 0), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (3, 1))
    g.process_command((3, 0), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    assert g.game_status() is GameStatus.BLACK

def test_draw_1():
    g = CheckersGame(3)
    g.process_command((5, 2), (4, 3))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command(None, None, Command.ACCEPT_DRAW)
    assert g.game_status() is GameStatus.DRAW

def test_draw_2():
    g = CheckersGame(3)
    g.process_command((5, 2), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (4, 3))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command(None, None, Command.DECLINE_DRAW)
    g.process_command((5, 4), (3, 2))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command(None, None, Command.DECLINE_DRAW)
    g.process_command((3, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.OFFER_DRAW)
    assert g.game_status() is GameStatus.ONGOING
    g.process_command(None, None, Command.ACCEPT_DRAW)
    assert g.game_status() is GameStatus.DRAW

def test_draw_3():
    g = CheckersGame(3)
    g.process_command((5, 4), (4, 3))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command((2, 3), (3, 4))
    g.process_command((2, 3), (3, 2))
    g.process_command((2, 3), (4, 1))
    g.process_command(None, None, Command.DECLINE_DRAW)
    g.process_command((2, 3), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 4), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 2), (7, 4))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command(None, None, Command.ACCEPT_DRAW)
    assert g.game_status() is GameStatus.DRAW

def test_resign_1():
    g = CheckersGame(2)
    g.process_command((4, 1), (3, 2))
    g.process_command(None, None, Command.RESIGN)
    assert g.game_status() is GameStatus.RED

def test_resign_2():
    g = CheckersGame(3)
    g.process_command((5, 0), (4, 1))
    g.process_command(None, None, Command.OFFER_DRAW)
    g.process_command(None, None, Command.RESIGN)
    assert g.game_status() is GameStatus.BLACK

def test_jump_path_1():
    g = CheckersGame(4)
    g.process_command((6, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 4), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 2))
    g.process_command((5, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (5, 3))
    g.process_command((6, 5), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 7), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 5), (6, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (5, 8))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (4, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 8), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (4, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 9), (5, 8))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 7), (6, 9))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 7), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 8), (6, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 2), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (0, 3))
    g.process_command((1, 4), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 5), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 9), (7, 8))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 5), (1, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 4), (8, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    assert sorted(g.jump_paths((6, 3))) == sorted(
        [[(6, 3), (4, 5), (2, 7), (0, 5)],
        [(6, 3), (4, 5), (2, 3), (0, 5)]]
    )
    assert sorted(g.jump_paths((6, 5))) == sorted(
        [[(6, 5), (4, 3), (2, 5)],
        [(6, 5), (4, 3), (2, 1)]]
    )


def test_jump_path_2():
    g = CheckersGame(4)
    g.process_command((6, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 7), (5, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 7), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 5), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 2), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (7, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 1), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 4), (2, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 8), (4, 9))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 7), (5, 8))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 9), (6, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 7), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 5), (6, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 7), (5, 8))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 8), (8, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (7, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 3), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 7), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 8), (4, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 0), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 7), (3, 6))
    g.process_command(None, None, Command.END_TURN)
    assert sorted(g.jump_paths((2,5))) == sorted(
        [[(2, 5), (4, 7), (6, 5), (8, 7)],
        [(2, 5), (4, 7), (6, 5), (8, 3)]]
    )
    assert sorted(g.jump_paths((2,7))) == sorted(
        [[(2, 7), (4, 5), (6, 7), (8, 5)],
        [(2, 7), (4, 5), (6, 3), (8, 5)]]
    )

def test_jump_path_3():
    g = CheckersGame(4)
    g.process_command((6, 3), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (4, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (5, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 3), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 6), (4, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 7), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (5, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 2), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 3), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 0), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 2))
    g.process_command((3, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (6, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (7, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 3), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 1))
    g.process_command((2, 1), (3, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (2, 2))
    g.process_command((5, 0), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 0), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 2), (8, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 1), (7, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 2), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 2), (2, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 4), (3, 1))
    g.process_command((1, 4), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((8, 3), (7, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (8, 7))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 8), (7, 6))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((2, 1), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 4), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((0, 3), (1, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (2, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((1, 4), (3, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 5), (5, 4))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((3, 2), (4, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 4), (4, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((4, 1), (4, 0))
    g.process_command((4, 1), (5, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((7, 6), (6, 4))
    g.process_command((7, 6), (6, 5))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((5, 0), (6, 1))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 4), (8, 3))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((6, 1), (7, 0))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 0), (8, 1))
    g.process_command(None, None, Command.END_TURN)
    assert sorted(g.jump_paths((7,0))) == sorted([[(7,0), (9,2)]])
    g.process_command((7, 0), (9, 2))
    g.process_command(None, None, Command.END_TURN)
    g.process_command((9, 6), (8, 7))
    g.process_command(None, None, Command.END_TURN)
    assert sorted(g.jump_paths((9,2))) == sorted(
        [[(9, 2), (7, 4), (9, 6)],
        [(9, 2), (7, 4), (5, 6), (3, 4),(5, 2), (7, 4), (9, 6)],
        [(9, 2), (7, 4), (5, 2), (3, 4), (5, 6), (7, 4), (9, 6)]]
    )

def test_validation_1():
    g = CheckersGame(3)
    assert g.process_command((0, 0), (10000, 0)) is not None
    assert g.turn == 0

def test_validation_2():
    g = CheckersGame(1)
    g.process_command((3, 2), (2, 3))
    g.process_command((0, 1), (1, 2))
    assert g.process_command((2, 3), (1, 2)) is not None

def test_validation_3():
    g = CheckersGame(3)
    assert g.process_command((5, 0), (4, 0)) is not None
